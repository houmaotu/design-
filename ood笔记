一 特性 fundimental
1 封装 (encapsulation)
      概念：class 类 object（call class出来的玩意） 例如
      attribute function放在class里面 写出来access modifier(public python 默认 private _ protected __) 
2 继承 (inheritance)
      类 子类（可以用父类别所有的 除private 可以重写overwrite 重载overload 不同输入类型的重写 inheritance直接用爹的 super 注意final 不许继承 java的玩意）
      抽象类 （不能初始化 只能用子类初始化 可以抽象函数 抽象类的子类必须写出抽象函数 否则仍然还是抽象类
      interface 接口出去的类 （父类只有一个 interface可以有很多 interface的抽象类的抽象函数必须都有）
3 多态 (polymorphism) 一个function 不同的表现方式
4 异常 exception  
    checked exception (加上try) unchecked exception (例如runtime exception)
5 枚举类 enum 阻止传过去诡异的变量  加上了限制

二。原则
1 single responsibility prciciple 单一责任原则 
        一个类只负责一种功能 避免臃肿 例如 计算三角形面的类需要增加print功能 函数不直接加在类里面 而是再写一个print类
2 Open close principle 开放封闭原则
        对扩展开放 对修改封闭（opeo to extention,close to modification）计算三角形面的类 扩展也可计算长方形 也是不写直接写计算长方形的函数 
                                                                      写个抽象类 下面有shape和get area 直接在areacal类直接叫函数
3 Liskov substuituitio printiple 里氏替换原则
        一个子类应该可以替换他的父类 例如 shape类别 可以计算体积 面积 然后tiangle继承就不好 因为没有提及
4 interface segregatin principle 接口分离原则
       一个类别不应该实现用不上的接口
5 dependency inversion principle 依赖反转原则
   抽象不依赖于具体实现，具体依赖于抽象 high level的实体不依赖low level
   例如 areacalcuator 依赖于triangle 不好 triangle 依赖于 areacalcuator 好
   
三。解法
例如 design evevator system for this buiding
1clarify 找关键字 evevator 客梯货梯？buiding ：多个电梯 几个电梯可以响应一个请求 几个可以搭乘
         规则：电梯规则 判断超重 哪个电梯会相应request 能否瞎JB按
2core object 用一个object作为基础 确定object之间的关系  必须存在的类别 elevator system 线性的其他类 request elevator button
                                                     类别之间的关系 一个电梯系统好几个电梯。。。
 注意 画类图 access modifier package( package都能看见避免使用) public（+ 任何类可看见） pravite（- 本类可见） protected（# 子类可见）
3 use case 支持的功能   core object 之后 支持什么场景  例如  elevator 处理：内部request 外部request 开门 。。。 （user角度 server角度）                                                                              
4 class 画类图（class diagram） 画出类的 function variable 之间的关系   
       context: elevator system 然后依赖于interface: handlerequest setstrategy .... 然后下面分strategy ABC....
   exception：一个别的类
5 correctness 检车一下       
 四。管理类 高频
   思路：clarify 找关键字 object：输入输出是啥 车/停在哪 use case: 角度：管理员 reserve serve checkout class:用收据的形式 做了什么
   例子：parking lot
   1 clarify what: 管理什么 车（种类 大小） 车库（露天 停车楼） 车位（车 残疾人 电动车）需要面试的时候商量
             how 大车怎么停 几层 怎么收费
   
   2 core obj    input bus car moto -> parking lot -> spot
                 注意: parkinglot 不要把所有的车都传进去 只要必需的信息 存进去一种ticket就可以了
   3 case 功能：server角度 看车位数： 车进 车出 计算价格 （reserve serve checkout）
   4 class: 看车位： parkinglot 里面设置public的getcount （如果有层数 不要几层几个变量 因为不容易extend 搞一个类level 存get count 
                                                                                                      然后spots类传进去 这个类别可以村take leave）
            停车: 车的大小 bus car moto（vihicle抽象类的子类）类别加上去getsize
                  找位置 parkinglot 里面设置 findspotsfor 传进去一个类
                  停车 vihicle里面存停的位置不好 应存收据ticket （vihecle spots）
                  
            结账：拿ticket
    5 correctness：走一次iu可以了 查一下excepetion ticket不好用 停车满了
      challenge： 连续的车位 加一个row为一排
      
   design pattern(singleton一个类一个instance 谁都可以访问)
           parkinglot: private的生成 public static 的访问（第一次创建 后面访问） static private变量记录是否在public调用过 
                        static变量依赖于类 不依赖于instance）
                    但是多线程可能出问题 转换的时候可能出问题 public static synchronized 锁住
                                静态内部 略
                                config服务所有
                    
